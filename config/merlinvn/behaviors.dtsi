#define QUICK_TAP_MS 175

ZMK_BEHAVIOR(mo_sk, hold_tap,  // left-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <200>;
    bindings = <&mo>, <&sk>;
)

ZMK_BEHAVIOR(hml, hold_tap,  // left-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_R THUMBS_R>;
    hold-trigger-on-release;
)

ZMK_BEHAVIOR(hmr, hold_tap,  // right-hand HRMs
    flavor = "balanced";
    tapping-term-ms = <280>;
    quick-tap-ms = <QUICK_TAP_MS>;
    require-prior-idle-ms = <150>;
    bindings = <&kp>, <&kp>;
    hold-trigger-key-positions = <KEYS_L THUMBS_L>;
    hold-trigger-on-release;
)

ZMK_BEHAVIOR(alt_tab, tri_state,
    bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
    ignored-key-positions = <>;
    ignored-layers = <NAV_L>;
)

ZMK_BEHAVIOR(gui_tab, tri_state,
    bindings = <&kt LGUI>, <&kp TAB>, <&kt LGUI>;
    ignored-key-positions = <>;
    ignored-layers = <NAV_L>;
)

ZMK_BEHAVIOR(gui_grave, tri_state,
    bindings = <&kt LGUI>, <&kp GRAVE>, <&kt LGUI>;
    ignored-key-positions = <>;
    ignored-layers = <NAV_L>;
)

ZMK_BEHAVIOR(ctrl_tab, tri_state,
    bindings = <&kt LCTRL>, <&kp  TAB>, <&kt LCTRL>;
    ignored-key-positions = <>;
    ignored-layers = <NAV_L>;
)

ZMK_BEHAVIOR(alt_w, tri_state,
    bindings = <&kt LALT>, <&kp W>, <&kt LALT>;
    ignored-key-positions = <>;
    ignored-layers = <NAV_L>;
)

// tap: sticky-shift | shift + tap/ double-tap: caps-word | hold: shift
ZMK_BEHAVIOR(smart_shft, mod_morph,
    bindings = <&sk LSHFT>, <&caps_word>;
    mods = <(MOD_LSFT|MOD_RSFT)>;
)
